// Implementation file for parser generated by fsyacc
module internal EmberLib.Glow.Formula.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Ast;

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | IT
  | SIN
  | COS
  | TAN
  | SINH
  | COSH
  | TANH
  | ASIN
  | ACOS
  | ATAN
  | SQRT
  | PI
  | E
  | LOG
  | EXP
  | EOF
  | ABS
  | SGN
  | ROUND
  | CEIL
  | INT
  | FLOAT
  | COMMA
  | LPAREN
  | RPAREN
  | ASTERISK
  | SLASH
  | BACKSLASH
  | PERCENT
  | PLUS
  | MINUS
  | POW
  | INTEGER of (int64)
  | DOUBLE of (System.Double)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_IT
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_TAN
    | TOKEN_SINH
    | TOKEN_COSH
    | TOKEN_TANH
    | TOKEN_ASIN
    | TOKEN_ACOS
    | TOKEN_ATAN
    | TOKEN_SQRT
    | TOKEN_PI
    | TOKEN_E
    | TOKEN_LOG
    | TOKEN_EXP
    | TOKEN_EOF
    | TOKEN_ABS
    | TOKEN_SGN
    | TOKEN_ROUND
    | TOKEN_CEIL
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_COMMA
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_ASTERISK
    | TOKEN_SLASH
    | TOKEN_BACKSLASH
    | TOKEN_PERCENT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_INTEGER
    | TOKEN_DOUBLE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Expression
    | NONTERM_Product
    | NONTERM_Molecule
    | NONTERM_Power
    | NONTERM_Atom

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | IT  -> 0 
  | SIN  -> 1 
  | COS  -> 2 
  | TAN  -> 3 
  | SINH  -> 4 
  | COSH  -> 5 
  | TANH  -> 6 
  | ASIN  -> 7 
  | ACOS  -> 8 
  | ATAN  -> 9 
  | SQRT  -> 10 
  | PI  -> 11 
  | E  -> 12 
  | LOG  -> 13 
  | EXP  -> 14 
  | EOF  -> 15 
  | ABS  -> 16 
  | SGN  -> 17 
  | ROUND  -> 18 
  | CEIL  -> 19 
  | INT  -> 20 
  | FLOAT  -> 21 
  | COMMA  -> 22 
  | LPAREN  -> 23 
  | RPAREN  -> 24 
  | ASTERISK  -> 25 
  | SLASH  -> 26 
  | BACKSLASH  -> 27 
  | PERCENT  -> 28 
  | PLUS  -> 29 
  | MINUS  -> 30 
  | POW  -> 31 
  | INTEGER _ -> 32 
  | DOUBLE _ -> 33 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_IT 
  | 1 -> TOKEN_SIN 
  | 2 -> TOKEN_COS 
  | 3 -> TOKEN_TAN 
  | 4 -> TOKEN_SINH 
  | 5 -> TOKEN_COSH 
  | 6 -> TOKEN_TANH 
  | 7 -> TOKEN_ASIN 
  | 8 -> TOKEN_ACOS 
  | 9 -> TOKEN_ATAN 
  | 10 -> TOKEN_SQRT 
  | 11 -> TOKEN_PI 
  | 12 -> TOKEN_E 
  | 13 -> TOKEN_LOG 
  | 14 -> TOKEN_EXP 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_ABS 
  | 17 -> TOKEN_SGN 
  | 18 -> TOKEN_ROUND 
  | 19 -> TOKEN_CEIL 
  | 20 -> TOKEN_INT 
  | 21 -> TOKEN_FLOAT 
  | 22 -> TOKEN_COMMA 
  | 23 -> TOKEN_LPAREN 
  | 24 -> TOKEN_RPAREN 
  | 25 -> TOKEN_ASTERISK 
  | 26 -> TOKEN_SLASH 
  | 27 -> TOKEN_BACKSLASH 
  | 28 -> TOKEN_PERCENT 
  | 29 -> TOKEN_PLUS 
  | 30 -> TOKEN_MINUS 
  | 31 -> TOKEN_POW 
  | 32 -> TOKEN_INTEGER 
  | 33 -> TOKEN_DOUBLE 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Expression 
    | 3 -> NONTERM_Expression 
    | 4 -> NONTERM_Expression 
    | 5 -> NONTERM_Product 
    | 6 -> NONTERM_Product 
    | 7 -> NONTERM_Product 
    | 8 -> NONTERM_Product 
    | 9 -> NONTERM_Product 
    | 10 -> NONTERM_Molecule 
    | 11 -> NONTERM_Molecule 
    | 12 -> NONTERM_Power 
    | 13 -> NONTERM_Power 
    | 14 -> NONTERM_Atom 
    | 15 -> NONTERM_Atom 
    | 16 -> NONTERM_Atom 
    | 17 -> NONTERM_Atom 
    | 18 -> NONTERM_Atom 
    | 19 -> NONTERM_Atom 
    | 20 -> NONTERM_Atom 
    | 21 -> NONTERM_Atom 
    | 22 -> NONTERM_Atom 
    | 23 -> NONTERM_Atom 
    | 24 -> NONTERM_Atom 
    | 25 -> NONTERM_Atom 
    | 26 -> NONTERM_Atom 
    | 27 -> NONTERM_Atom 
    | 28 -> NONTERM_Atom 
    | 29 -> NONTERM_Atom 
    | 30 -> NONTERM_Atom 
    | 31 -> NONTERM_Atom 
    | 32 -> NONTERM_Atom 
    | 33 -> NONTERM_Atom 
    | 34 -> NONTERM_Atom 
    | 35 -> NONTERM_Atom 
    | 36 -> NONTERM_Atom 
    | 37 -> NONTERM_Atom 
    | 38 -> NONTERM_Atom 
    | 39 -> NONTERM_Atom 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | IT  -> "IT" 
  | SIN  -> "SIN" 
  | COS  -> "COS" 
  | TAN  -> "TAN" 
  | SINH  -> "SINH" 
  | COSH  -> "COSH" 
  | TANH  -> "TANH" 
  | ASIN  -> "ASIN" 
  | ACOS  -> "ACOS" 
  | ATAN  -> "ATAN" 
  | SQRT  -> "SQRT" 
  | PI  -> "PI" 
  | E  -> "E" 
  | LOG  -> "LOG" 
  | EXP  -> "EXP" 
  | EOF  -> "EOF" 
  | ABS  -> "ABS" 
  | SGN  -> "SGN" 
  | ROUND  -> "ROUND" 
  | CEIL  -> "CEIL" 
  | INT  -> "INT" 
  | FLOAT  -> "FLOAT" 
  | COMMA  -> "COMMA" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | ASTERISK  -> "ASTERISK" 
  | SLASH  -> "SLASH" 
  | BACKSLASH  -> "BACKSLASH" 
  | PERCENT  -> "PERCENT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | INTEGER _ -> "INTEGER" 
  | DOUBLE _ -> "DOUBLE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | IT  -> (null : System.Object) 
  | SIN  -> (null : System.Object) 
  | COS  -> (null : System.Object) 
  | TAN  -> (null : System.Object) 
  | SINH  -> (null : System.Object) 
  | COSH  -> (null : System.Object) 
  | TANH  -> (null : System.Object) 
  | ASIN  -> (null : System.Object) 
  | ACOS  -> (null : System.Object) 
  | ATAN  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | PI  -> (null : System.Object) 
  | E  -> (null : System.Object) 
  | LOG  -> (null : System.Object) 
  | EXP  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ABS  -> (null : System.Object) 
  | SGN  -> (null : System.Object) 
  | ROUND  -> (null : System.Object) 
  | CEIL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | ASTERISK  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | BACKSLASH  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 22us; 65535us; 0us; 2us; 49us; 4us; 52us; 5us; 55us; 6us; 58us; 7us; 61us; 8us; 64us; 9us; 67us; 10us; 70us; 11us; 73us; 12us; 75us; 13us; 78us; 14us; 83us; 15us; 85us; 16us; 88us; 17us; 91us; 18us; 94us; 19us; 97us; 20us; 100us; 21us; 103us; 22us; 106us; 23us; 108us; 24us; 24us; 65535us; 0us; 29us; 25us; 26us; 27us; 28us; 49us; 29us; 52us; 29us; 55us; 29us; 58us; 29us; 61us; 29us; 64us; 29us; 67us; 29us; 70us; 29us; 73us; 29us; 75us; 29us; 78us; 29us; 83us; 29us; 85us; 29us; 88us; 29us; 91us; 29us; 94us; 29us; 97us; 29us; 100us; 29us; 103us; 29us; 106us; 29us; 108us; 29us; 28us; 65535us; 0us; 38us; 25us; 38us; 27us; 38us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 49us; 38us; 52us; 38us; 55us; 38us; 58us; 38us; 61us; 38us; 64us; 38us; 67us; 38us; 70us; 38us; 73us; 38us; 75us; 38us; 78us; 38us; 83us; 38us; 85us; 38us; 88us; 38us; 91us; 38us; 94us; 38us; 97us; 38us; 100us; 38us; 103us; 38us; 106us; 38us; 108us; 38us; 29us; 65535us; 0us; 41us; 25us; 41us; 27us; 41us; 30us; 41us; 32us; 41us; 34us; 41us; 36us; 41us; 39us; 40us; 49us; 41us; 52us; 41us; 55us; 41us; 58us; 41us; 61us; 41us; 64us; 41us; 67us; 41us; 70us; 41us; 73us; 41us; 75us; 41us; 78us; 41us; 83us; 41us; 85us; 41us; 88us; 41us; 91us; 41us; 94us; 41us; 97us; 41us; 100us; 41us; 103us; 41us; 106us; 41us; 108us; 41us; 30us; 65535us; 0us; 44us; 25us; 44us; 27us; 44us; 30us; 44us; 32us; 44us; 34us; 44us; 36us; 44us; 39us; 44us; 42us; 43us; 49us; 44us; 52us; 44us; 55us; 44us; 58us; 44us; 61us; 44us; 64us; 44us; 67us; 44us; 70us; 44us; 73us; 44us; 75us; 44us; 78us; 44us; 83us; 44us; 85us; 44us; 88us; 44us; 91us; 44us; 94us; 44us; 97us; 44us; 100us; 44us; 103us; 44us; 106us; 44us; 108us; 44us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 26us; 51us; 80us; 110us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 2us; 3us; 1us; 1us; 3us; 2us; 3us; 17us; 3us; 2us; 3us; 18us; 3us; 2us; 3us; 19us; 3us; 2us; 3us; 20us; 3us; 2us; 3us; 21us; 3us; 2us; 3us; 22us; 3us; 2us; 3us; 23us; 3us; 2us; 3us; 24us; 4us; 2us; 3us; 25us; 26us; 3us; 2us; 3us; 26us; 3us; 2us; 3us; 27us; 4us; 2us; 3us; 30us; 31us; 3us; 2us; 3us; 31us; 3us; 2us; 3us; 32us; 3us; 2us; 3us; 33us; 3us; 2us; 3us; 34us; 3us; 2us; 3us; 35us; 3us; 2us; 3us; 36us; 3us; 2us; 3us; 37us; 3us; 2us; 3us; 38us; 3us; 2us; 3us; 39us; 1us; 2us; 5us; 2us; 5us; 6us; 7us; 8us; 1us; 3us; 5us; 3us; 5us; 6us; 7us; 8us; 5us; 4us; 5us; 6us; 7us; 8us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 2us; 10us; 12us; 2us; 11us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 2us; 25us; 26us; 2us; 25us; 26us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 30us; 31us; 2us; 30us; 31us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 14us; 18us; 22us; 26us; 30us; 34us; 38us; 42us; 47us; 51us; 55us; 60us; 64us; 68us; 72us; 76us; 80us; 84us; 88us; 92us; 96us; 98us; 104us; 106us; 112us; 118us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 141us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 207us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 229us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; 268us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; |]
let _fsyacc_action_rows = 110
let _fsyacc_actionTableElements = [|25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 49152us; 3us; 32768us; 15us; 3us; 29us; 25us; 30us; 27us; 0us; 16385us; 3us; 32768us; 24us; 50us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 53us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 56us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 59us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 62us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 65us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 68us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 71us; 29us; 25us; 30us; 27us; 4us; 32768us; 22us; 75us; 24us; 74us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 76us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 79us; 29us; 25us; 30us; 27us; 4us; 32768us; 22us; 85us; 24us; 84us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 86us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 89us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 92us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 95us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 98us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 101us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 104us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 107us; 29us; 25us; 30us; 27us; 3us; 32768us; 24us; 109us; 29us; 25us; 30us; 27us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 4us; 16386us; 25us; 30us; 26us; 32us; 27us; 34us; 28us; 36us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 4us; 16387us; 25us; 30us; 26us; 32us; 27us; 34us; 28us; 36us; 4us; 16388us; 25us; 30us; 26us; 32us; 27us; 34us; 28us; 36us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16389us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16390us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16391us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16392us; 0us; 16393us; 24us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 32us; 47us; 33us; 46us; 1us; 16394us; 31us; 42us; 1us; 16395us; 31us; 42us; 24us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 32us; 47us; 33us; 46us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 1us; 32768us; 23us; 49us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16401us; 1us; 32768us; 23us; 52us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16402us; 1us; 32768us; 23us; 55us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16403us; 1us; 32768us; 23us; 58us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16404us; 1us; 32768us; 23us; 61us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16405us; 1us; 32768us; 23us; 64us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16406us; 1us; 32768us; 23us; 67us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16407us; 1us; 32768us; 23us; 70us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16408us; 1us; 32768us; 23us; 73us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16409us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16410us; 1us; 32768us; 23us; 78us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 1us; 32768us; 23us; 83us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16414us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16415us; 1us; 32768us; 23us; 88us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16416us; 1us; 32768us; 23us; 91us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16417us; 1us; 32768us; 23us; 94us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16418us; 1us; 32768us; 23us; 97us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16419us; 1us; 32768us; 23us; 100us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16420us; 1us; 32768us; 23us; 103us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16421us; 1us; 32768us; 23us; 106us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16422us; 25us; 32768us; 0us; 45us; 1us; 48us; 2us; 51us; 3us; 54us; 4us; 57us; 5us; 60us; 6us; 63us; 7us; 66us; 8us; 69us; 9us; 72us; 10us; 77us; 11us; 80us; 12us; 81us; 13us; 82us; 14us; 87us; 16us; 102us; 17us; 105us; 18us; 90us; 19us; 93us; 20us; 96us; 21us; 99us; 23us; 108us; 30us; 39us; 32us; 47us; 33us; 46us; 0us; 16423us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 26us; 27us; 31us; 32us; 36us; 40us; 44us; 48us; 52us; 56us; 60us; 64us; 69us; 73us; 77us; 82us; 86us; 90us; 94us; 98us; 102us; 106us; 110us; 114us; 118us; 144us; 149us; 175us; 180us; 185us; 211us; 212us; 238us; 239us; 265us; 266us; 292us; 293us; 294us; 319us; 321us; 323us; 348us; 349us; 350us; 351us; 352us; 353us; 355us; 381us; 382us; 384us; 410us; 411us; 413us; 439us; 440us; 442us; 468us; 469us; 471us; 497us; 498us; 500us; 526us; 527us; 529us; 555us; 556us; 558us; 584us; 585us; 587us; 613us; 614us; 640us; 641us; 643us; 669us; 670us; 671us; 672us; 674us; 700us; 701us; 727us; 728us; 730us; 756us; 757us; 759us; 785us; 786us; 788us; 814us; 815us; 817us; 843us; 844us; 846us; 872us; 873us; 875us; 901us; 902us; 904us; 930us; 931us; 957us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 6us; 4us; 1us; 1us; 4us; 6us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 16391us; 65535us; 16392us; 16393us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 16398us; 16399us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 16410us; 65535us; 65535us; 16411us; 16412us; 16413us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 16423us; |]
let _fsyacc_reductions ()  =    [| 
# 308 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                                                               _1 
                   )
# 18 "Parser.fsy"
                 : Ast.expr));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                                                               Plus(_1, _3) 
                   )
# 21 "Parser.fsy"
                 : 'Expression));
# 340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                                                                               Minus(_1, _3) 
                   )
# 22 "Parser.fsy"
                 : 'Expression));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                                                               _1 
                   )
# 23 "Parser.fsy"
                 : 'Expression));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Molecule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                                                               Times(_1, _3) 
                   )
# 26 "Parser.fsy"
                 : 'Product));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Molecule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                                                               Divide(_1, _3) 
                   )
# 27 "Parser.fsy"
                 : 'Product));
# 387 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Molecule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                                                                               IntegerDivide(_1, _3) 
                   )
# 28 "Parser.fsy"
                 : 'Product));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Product)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Molecule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                                               Modulo(_1, _3) 
                   )
# 29 "Parser.fsy"
                 : 'Product));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Molecule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                                               _1 
                   )
# 30 "Parser.fsy"
                 : 'Product));
# 422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                                               Negate _2 
                   )
# 33 "Parser.fsy"
                 : 'Molecule));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Power)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                                               _1 
                   )
# 34 "Parser.fsy"
                 : 'Molecule));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Power)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                                               Pow(_1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'Power));
# 456 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                                               _1 
                   )
# 38 "Parser.fsy"
                 : 'Power));
# 467 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                                               It 
                   )
# 41 "Parser.fsy"
                 : 'Atom));
# 477 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                                               Double(_1) 
                   )
# 42 "Parser.fsy"
                 : 'Atom));
# 488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                                               Integer(_1) 
                   )
# 43 "Parser.fsy"
                 : 'Atom));
# 499 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                                               Sin _3 
                   )
# 44 "Parser.fsy"
                 : 'Atom));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                               Cos _3 
                   )
# 45 "Parser.fsy"
                 : 'Atom));
# 521 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                               Tan _3 
                   )
# 46 "Parser.fsy"
                 : 'Atom));
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                                               Sinh _3 
                   )
# 47 "Parser.fsy"
                 : 'Atom));
# 543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                               Cosh _3 
                   )
# 48 "Parser.fsy"
                 : 'Atom));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                               Tanh _3 
                   )
# 49 "Parser.fsy"
                 : 'Atom));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                               Asin _3 
                   )
# 50 "Parser.fsy"
                 : 'Atom));
# 576 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                                               Acos _3 
                   )
# 51 "Parser.fsy"
                 : 'Atom));
# 587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                                               Atan _3 
                   )
# 52 "Parser.fsy"
                 : 'Atom));
# 598 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                               Atan2(_3, _5) 
                   )
# 53 "Parser.fsy"
                 : 'Atom));
# 610 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                               Sqrt _3 
                   )
# 54 "Parser.fsy"
                 : 'Atom));
# 621 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                               Pi 
                   )
# 55 "Parser.fsy"
                 : 'Atom));
# 631 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                               expr.E 
                   )
# 56 "Parser.fsy"
                 : 'Atom));
# 641 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                               Log _3 
                   )
# 57 "Parser.fsy"
                 : 'Atom));
# 652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                               LogTo(_3, _5) 
                   )
# 58 "Parser.fsy"
                 : 'Atom));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                               Exp _3 
                   )
# 59 "Parser.fsy"
                 : 'Atom));
# 675 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                               Round _3 
                   )
# 60 "Parser.fsy"
                 : 'Atom));
# 686 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                                               Ceiling _3 
                   )
# 61 "Parser.fsy"
                 : 'Atom));
# 697 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                                               AsInteger _3 
                   )
# 62 "Parser.fsy"
                 : 'Atom));
# 708 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                               AsFloat _3 
                   )
# 63 "Parser.fsy"
                 : 'Atom));
# 719 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                               Abs _3 
                   )
# 64 "Parser.fsy"
                 : 'Atom));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                               Sgn _3 
                   )
# 65 "Parser.fsy"
                 : 'Atom));
# 741 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                               _2 
                   )
# 66 "Parser.fsy"
                 : 'Atom));
|]
# 753 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
